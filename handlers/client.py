import traceback

from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Text

from create_bot import bot
from key_words import rake_key
from keyboards import client_kb

answers = {}


async def start_command(message: types.Message):
    try:
        await bot.send_message(message.from_user.id,
                               '–ü—Ä–∏–≤–µ—Ç:) –ú–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å, –∞ —è –ø–æ–¥–±–µ—Ä—É —Ç—ç–≥–∏ –¥–ª—è –Ω–µ–≥–æ. '
                               '–¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö.',
                               reply_markup=client_kb.kb_client)
        await message.delete()
    except:
        await message.reply('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:)\nhttps://t.me/Pizza_Sheef_ibot')


async def who_command(message: types.Message):
    await bot.send_message(message.from_user.id,
                           '–Ø –ø–æ–¥–±–∏—Ä–∞—é —Ö—ç—à—Ç—ç–≥–∏ –∫ —Ç–µ–∫—Å—Ç–∞–º.\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∏ –ø–æ–ª—É—á–∏—à—å —Å–ø–∏—Å–æ–∫ —Ç—ç–≥–æ–≤!'
                           '\n–ò—Å–ø–æ–ª—å–∑—É–π –∏–∑ –¥–ª—è –ò–Ω—Å—Ç–∞–≥—Ä–∞–º–º–∞, –¢–∏–∫–¢–æ–∫–∞, –í–∫–æ–Ω—Ç–∞–∫—Ç–µ –∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π:)')
    await message.answer('‚¨áÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç‚¨áÔ∏è')


async def text_command(message: types.Message):
    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç üìù')


async def hashtags_command(message: types.Message):
    try:
        await message.reply(rake_key.Hashtags().all_compile(message.text))
        await message.answer('‚¨áÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ç–µ–∫—Å—Ç‚¨áÔ∏è')

    except:
        print(traceback.format_exc())
        await message.answer('–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç. –ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —Ç—ç–≥–∏:(')


async def likes_command(message: types.Message):
    await message.answer('–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ö—ç—à—Ç—ç–≥–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üòä', reply_markup=client_kb.votes_kb)


async def vote_call(callback: types.CallbackQuery):
    res = int(callback.data.split('_')[1])
    if f'{callback.from_user.id}' not in answers:
        answers[f'{callback.from_user.id}'] = res
        await callback.answer('–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏')
    else:
        await callback.answer('–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏', show_alert=True)
    print(answers)


async def urls_command(message: types.Message):
    await message.reply('–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∫–∞–∫ —è –Ω–∞—Ö–æ–∂—É –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–≤–æ–∏—Ö —Ç–µ–∫—Å—Ç–∞—Ö? –°–º–æ—Ç—Ä–∏: ',
                        reply_markup=client_kb.url_kb)


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(start_command, commands=['start', 'help'])
    dp.register_message_handler(text_command, lambda message: '–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç' in message.text)
    dp.register_message_handler(who_command, lambda message: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è' in message.text)
    dp.register_message_handler(urls_command, lambda message: '–°—Å—ã–ª–∫–∏' in message.text)
    dp.register_message_handler(likes_command, lambda message: '–û—Ü–µ–Ω–∏—Ç—å ' in message.text)
    dp.register_message_handler(hashtags_command)
    dp.register_callback_query_handler(vote_call, Text(startswith='like_'))
